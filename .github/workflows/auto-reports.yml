name: 📊 Auto-Generate Reports & Dashboard

on:
  # Trigger on any push to main branch
  push:
    branches: [ main ]
    paths:
      - 'backlog/**'
      - 'active/**'
      - 'completed/**'
      - 'scripts/**'
  
  # Trigger on schedule (every 6 hours)
  schedule:
    - cron: '0 */6 * * *'
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      report_types:
        description: 'Report types to generate (comma-separated: velocity,health,priority,workflow,dashboard)'
        required: false
        default: 'velocity,health,priority,workflow,dashboard'
      output_format:
        description: 'Output format'
        required: false
        default: 'json'
        type: choice
        options:
          - json
          - markdown
          - both

jobs:
  generate-reports:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
    - name: 🚀 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        # No external dependencies needed for our scripts
        
    - name: 🔍 Validate Data Files
      run: |
        echo "📋 Checking data files..."
        if [ ! -f "backlog/PRIORITIZATION.json" ]; then
          echo "❌ PRIORITIZATION.json not found"
          exit 1
        fi
        
        if [ ! -f "backlog/COMPLETE_BACKLOG.json" ]; then
          echo "❌ COMPLETE_BACKLOG.json not found"
          exit 1
        fi
        
        echo "✅ Data files validated"
    
    - name: 📊 Generate Velocity Report
      if: contains(github.event.inputs.report_types, 'velocity') || github.event.inputs.report_types == '' || github.event_name != 'workflow_dispatch'
      run: |
        echo "🚀 Generating velocity report..."
        python scripts/generate_reports.py --type velocity --format ${{ github.event.inputs.output_format || 'json' }}
        
    - name: 🏥 Generate Health Report
      if: contains(github.event.inputs.report_types, 'health') || github.event.inputs.report_types == '' || github.event_name != 'workflow_dispatch'
      run: |
        echo "🏥 Generating health report..."
        python scripts/generate_reports.py --type health --format ${{ github.event.inputs.output_format || 'json' }}
        
    - name: 🎯 Generate Priority Report
      if: contains(github.event.inputs.report_types, 'priority') || github.event.inputs.report_types == '' || github.event_name != 'workflow_dispatch'
      run: |
        echo "🎯 Generating priority report..."
        python scripts/generate_reports.py --type priority --format ${{ github.event.inputs.output_format || 'json' }}
        
    - name: ⚡ Generate Workflow Report
      if: contains(github.event.inputs.report_types, 'workflow') || github.event.inputs.report_types == '' || github.event_name != 'workflow_dispatch'
      run: |
        echo "⚡ Generating workflow report..."
        python scripts/generate_reports.py --type workflow --format ${{ github.event.inputs.output_format || 'json' }}
    
    - name: 📈 Generate Dashboard
      if: contains(github.event.inputs.report_types, 'dashboard') || github.event.inputs.report_types == '' || github.event_name != 'workflow_dispatch'
      run: |
        echo "📈 Generating interactive dashboard..."
        python scripts/generate_dashboard.py --live
        
    - name: 🏷️ Generate Markdown Reports
      if: github.event.inputs.output_format == 'both' || (github.event.inputs.output_format == '' && github.event_name == 'workflow_dispatch')
      run: |
        echo "📝 Generating markdown reports..."
        python scripts/generate_reports.py --type velocity --format markdown
        python scripts/generate_reports.py --type health --format markdown
        python scripts/generate_reports.py --type priority --format markdown
        python scripts/generate_reports.py --type workflow --format markdown
    
    - name: 📋 Generate Report Summary
      run: |
        echo "📋 Creating report summary..."
        
        # Create reports index
        cat > reports/INDEX.md << 'EOF'
        # 📊 Reports Index
        
        Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        
        ## 🎯 Latest Reports
        
        EOF
        
        # List generated reports
        echo "### JSON Reports" >> reports/INDEX.md
        ls -la reports/*.json | while read -r line; do
          filename=$(echo "$line" | awk '{print $9}' | xargs basename)
          echo "- [$filename](/$filename)" >> reports/INDEX.md
        done
        
        if ls reports/*.md >/dev/null 2>&1; then
          echo "" >> reports/INDEX.md
          echo "### Markdown Reports" >> reports/INDEX.md
          ls -la reports/*.md | grep -v INDEX.md | while read -r line; do
            filename=$(echo "$line" | awk '{print $9}' | xargs basename)
            echo "- [$filename](/$filename)" >> reports/INDEX.md
          done
        fi
        
        echo "" >> reports/INDEX.md
        echo "## 📈 Dashboard" >> reports/INDEX.md
        echo "- [Interactive Dashboard](../docs/index.html)" >> reports/INDEX.md
        echo "- [Dashboard Data](../docs/dashboard-data.json)" >> reports/INDEX.md
        
        echo "✅ Report summary generated"
    
    - name: 🔄 Update README Badges
      run: |
        echo "🔄 Updating README badges..."
        
        if [ -f "docs/badges.md" ]; then
          # Read current badges
          BADGES=$(cat docs/badges.md)
          
          # Update README.md if it exists and has a badges section
          if [ -f "README.md" ] && grep -q "<!-- BADGES-START -->" README.md; then
            # Replace badges section
            sed -i "/<!-- BADGES-START -->/,/<!-- BADGES-END -->/c\\
        <!-- BADGES-START -->\\
        $BADGES\\
        <!-- BADGES-END -->" README.md
            
            echo "✅ README badges updated"
          else
            echo "ℹ️ No badges section found in README.md"
          fi
        fi
    
    - name: 📁 List Generated Files
      run: |
        echo "📁 Generated reports:"
        ls -la reports/ || echo "No reports directory"
        
        echo ""
        echo "📁 Generated dashboard:"
        ls -la docs/ || echo "No docs directory"
    
    - name: 💾 Commit Reports
      if: github.event_name != 'pull_request'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add generated files
        git add reports/ docs/ README.md || true
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "📝 No changes to commit"
        else
          # Create commit with detailed message
          COMMIT_MSG="📊 auto-report: $(date -u '+%Y-%m-%d %H:%M UTC')

        🎯 Generated Reports:
        $(ls reports/*.json 2>/dev/null | wc -l) JSON reports
        $(ls reports/*.md 2>/dev/null | grep -v INDEX.md | wc -l) Markdown reports
        
        📈 Dashboard: Updated with latest metrics
        🔄 Trigger: ${{ github.event_name }}
        
        Auto-generated by: .github/workflows/auto-reports.yml"
          
          git commit -m "$COMMIT_MSG"
          git push
          
          echo "✅ Reports committed and pushed"
        fi
        
    - name: 🌐 Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        enable_jekyll: false
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: '📈 Deploy dashboard: ${{ github.sha }}'
    
    - name: 📊 Report Generation Summary
      run: |
        echo "🎉 Report generation completed!"
        echo ""
        echo "📋 Summary:"
        echo "- Reports saved to: reports/"
        echo "- Dashboard saved to: docs/"
        echo "- View dashboard at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
        echo ""
        echo "🔧 Workflow triggered by: ${{ github.event_name }}"
        echo "⏰ Generated at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
